""" This module generates notes for a midi file using the
    trained neural network """
import pickle
import numpy
from music21 import instrument, note, stream, chord
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Dropout
from keras.layers import LSTM
from keras.layers import BatchNormalization as BatchNorm
from keras.layers import Activation

from data_translation_funcs import *

def generate(sonates, n_vocab):
    """ Generate a piano midi file """
    #load the notes used to train the model

    # Get all event parameters
    event_parameters = set(item for item in sonates)
    # map between event parameters and integers
    event_to_int_dict = dict((event, number) for number, event in enumerate(event_parameters))
    # map between integers and event parameters
    int_to_event_dict = dict(zip(event_to_int_dict.values(), event_to_int_dict.keys()))

    network_input, normalized_input = prepare_sequences(sonates, event_to_int_dict, n_vocab)
    model = create_network(normalized_input, n_vocab)
    prediction_output = generate_notes(model, network_input, int_to_event_dict, n_vocab)
    print(prediction_output)

    with open('prediction_output.txt', 'w') as f:
      for item in prediction_output:
        f.write(str(item))
        f.write('\n')
        
    #create_midi(prediction_output)
    return prediction_output

def prepare_sequences(sonates, event_to_int_dict, n_vocab):
    """ Prepare the sequences used by the Neural Network """
    sequence_length = 100
    network_input = []
    output = []
    for i in range(0, len(sonates) - sequence_length, 1):
        sequence_in = sonates[i:i + sequence_length]
        sequence_out = sonates[i + sequence_length]
        network_input.append([event_to_int_dict[char] for char in sequence_in])
        output.append(event_to_int_dict[sequence_out])

    n_patterns = len(network_input)

    # reshape the input into a format compatible with LSTM layers
    normalized_input = numpy.reshape(network_input, (n_patterns, sequence_length, 1))
    # normalize input
    normalized_input = normalized_input / float(n_vocab)

    return (network_input, normalized_input)

def create_network(network_input, n_vocab):
    """ create the structure of the neural network """
    model = Sequential()
    model.add(LSTM(
        512,
        input_shape=(network_input.shape[1], network_input.shape[2]),
        recurrent_dropout=0.3,
        return_sequences=True
    ))
    model.add(LSTM(512, return_sequences=True, recurrent_dropout=0.3,))
    model.add(LSTM(512))
    model.add(BatchNorm())
    model.add(Dropout(0.3))
    model.add(Dense(256))
    model.add(Activation('relu'))
    model.add(BatchNorm())
    model.add(Dropout(0.3))
    model.add(Dense(256))
    model.add(Activation('relu'))
    model.add(BatchNorm())
    model.add(Dropout(0.3))
    model.add(Dense(256))
    model.add(Activation('relu'))
    model.add(BatchNorm())
    model.add(Dropout(0.3))
    model.add(Dense(n_vocab))
    model.add(Activation('softmax'))
    model.compile(loss='categorical_crossentropy', optimizer='rmsprop')

    # Load the weights to each node
    model.load_weights('weights-improvement-193-0.1417-bigger.hdf5')

    return model

def generate_notes(model, network_input, int_to_event_dict, n_vocab):
    """ Generate notes from the neural network based on a sequence of notes """
    # pick a random sequence from the input as a starting point for the prediction
    start = numpy.random.randint(0, len(network_input)-1)

    pattern = network_input[start]
    prediction_output = []

    # generate 500 notes
    for note_index in range(500):
        prediction_input = numpy.reshape(pattern, (1, len(pattern), 1))
        prediction_input = prediction_input / float(n_vocab)

        prediction = model.predict(prediction_input, verbose=0)

        index = numpy.argmax(prediction)
        result = int_to_event_dict[index]
        prediction_output.append(result)

        pattern.append(index)
        pattern = pattern[1:len(pattern)]

    return prediction_output

def create_midi(prediction_output):
    """ convert the output from the prediction to notes and create a midi file
        from the notes """
    offset = 0
    output_notes = []

    # create note and chord objects based on the values generated by the model
    for pattern in prediction_output:
        # pattern is a chord
        if ('.' in pattern) or pattern.isdigit():
            notes_in_chord = pattern.split('.')
            notes = []
            for current_note in notes_in_chord:
                new_note = note.Note(int(current_note))
                new_note.storedInstrument = instrument.Piano()
                notes.append(new_note)
            new_chord = chord.Chord(notes)
            new_chord.offset = offset
            output_notes.append(new_chord)
        # pattern is a note
        else:
            new_note = note.Note(pattern)
            new_note.offset = offset
            new_note.storedInstrument = instrument.Piano()
            output_notes.append(new_note)

        # increase offset each iteration so that notes do not stack
        offset += 0.5

    midi_stream = stream.Stream(output_notes)

    midi_stream.write('midi', fp='test_output.mid')

if __name__ == '__main__':
    sonates, n_vocab = rearrange_initial_data()
    predicton_output = generate(sonates, n_vocab)
    outcome = rearrange_outcome_sonata(predicton_output)
    #create_piece(outcome)